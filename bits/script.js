// Generated by CoffeeScript 1.8.0
(function() {
  var ScrollAnimation, calculatePhotoHeightForWindow, closePhotoShoot, openPhotoShoot, resize, resizeBody, resizePhotoImg, resizePhotoShoot,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(window).on("load", function(event) {
    resize(event);
    return document.body.classList.add("loaded");
  });

  $(window).on("resize", function(event) {
    return resize(event);
  });

  $(document).on("click", "div.photoshoot div.cover a", function(event) {
    return openPhotoShoot($(event.target).closest("div.photoshoot").get(0));
  });

  $(document).on("click", "div.photoshoot > div.cover > img", function(event) {
    var el;
    el = event.target.parentElement.parentElement;
    if (!el.classList.contains("open")) {
      return openPhotoShoot(el);
    }
  });

  openPhotoShoot = function(el) {
    var rightEdgeOfCoverWasAlmostOffscreen, rightEdgeOfCoverWasAtEdgeOfScreen, rightEdgeOfCoverWasOffscreen, rightXofEl;
    el.classList.add("open");
    resizePhotoShoot(el);
    el.style.transition = "width 750ms ease-in-out";
    setTimeout((function() {
      return el.classList.add("opened");
    }), 750);
    rightXofEl = el.getBoundingClientRect().right;
    rightEdgeOfCoverWasAtEdgeOfScreen = rightXofEl === window.innerWidth;
    rightEdgeOfCoverWasOffscreen = rightXofEl > window.innerWidth;
    rightEdgeOfCoverWasAlmostOffscreen = (rightXofEl + window.innerWidth / 5) > window.innerWidth;
    resizeBody();
    if (rightEdgeOfCoverWasAtEdgeOfScreen) {
      new ScrollAnimation({
        scrollTo: window.scrollX + (window.innerWidth / 2)
      });
    }
    if (rightEdgeOfCoverWasOffscreen || rightEdgeOfCoverWasAlmostOffscreen) {
      return new ScrollAnimation({
        scrollTo: window.scrollX + rightXofEl - (window.innerWidth / 2)
      });
    }
  };

  closePhotoShoot = function(el) {
    el.classList.remove("open");
    resizePhotoShoot(el);
    el.style.transition = "width 750ms ease-in-out";
    return setTimeout(resizeBody, 750);
  };

  resize = function(event) {
    var el, _i, _j, _len, _len1, _ref, _ref1;
    _ref = $('div.photoshoot img').toArray();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      el = _ref[_i];
      resizePhotoImg(el);
    }
    _ref1 = $('div.photoshoot').toArray();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      el = _ref1[_j];
      resizePhotoShoot(el);
    }
    return resizeBody();
  };

  calculatePhotoHeightForWindow = function() {
    return Math.max(320, window.innerHeight - (115 + 230));
  };

  resizePhotoImg = function(el) {
    return el.style.height = calculatePhotoHeightForWindow() + 'px';
  };

  resizePhotoShoot = function(el) {
    var allImages, closedWidth, coverElement, coverImage, currentWidth, img, openWidth, photosElement, _i, _len;
    coverElement = $(el).find("div.cover").get(0);
    coverImage = $(el).find("div.cover img").get(0);
    photosElement = $(el).find("div.photos").get(0);
    allImages = $(el).find("img").toArray();
    closedWidth = $(coverImage).width();
    openWidth = -22;
    for (_i = 0, _len = allImages.length; _i < _len; _i++) {
      img = allImages[_i];
      openWidth = openWidth + $(img).width() + 22;
    }
    currentWidth = el.classList.contains("open") ? openWidth : closedWidth;
    coverElement.style.width = closedWidth + 'px';
    photosElement.style.width = (openWidth - closedWidth) + 'px';
    el.style.width = currentWidth + 'px';
    el.style.height = calculatePhotoHeightForWindow() + 'px';
    return el.style.transition = "";
  };

  resizeBody = function() {
    var bodyWidth, el, _i, _len, _ref;
    bodyWidth = -22 - 22;
    _ref = $('div.photoshoot').toArray();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      el = _ref[_i];
      bodyWidth = bodyWidth + 22 + parseInt(el.style.width);
    }
    return $(document.body).css({
      width: bodyWidth
    });
  };

  ScrollAnimation = (function() {
    ScrollAnimation.prototype.requestAnimationFrame = window.requestAnimationFrame || function(callback) {
      return setTimeout(callback, 15);
    };

    ScrollAnimation.prototype.easeInQuad = function(pos) {
      return Math.pow(pos, 3);
    };

    function ScrollAnimation(params) {
      this.render = __bind(this.render, this);
      this.completeCallback = params.oncomplete;
      this.targetX = params.scrollTo;
      this.initialX = window.scrollX;
      this.delta = this.targetX - this.initialX;
      this.duration = this.delta * 0.33;
      requestAnimationFrame(this.render);
    }

    ScrollAnimation.prototype.render = function(time) {
      var pos, x;
      if (this.start === void 0) {
        this.start = time;
      }
      pos = Math.min(1, Math.max((time - this.start) / this.duration, 0));
      x = Math.round(this.initialX + this.delta * this.easeInQuad(pos));
      if (this.delta > 0 && x > this.targetX) {
        x = this.targetX;
      }
      if (this.delta < 0 && x < this.targetX) {
        x = this.targetX;
      }
      window.scrollTo(x, 0);
      if (x === this.targetX) {
        if (this.completeCallback) {
          return this.completeCallback();
        }
      } else {
        return requestAnimationFrame(this.render);
      }
    };

    return ScrollAnimation;

  })();

}).call(this);
